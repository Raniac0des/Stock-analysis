import yfinance as yf
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import plotly.graph_objs as go

# Fetch data for NVDA from January 1st, 2023 to January 1st, 2024
ticker = 'NVDA'
start_date = '2023-01-01'
end_date = '2024-01-01'
stock_data = yf.download(ticker, start=start_date, end=end_date, interval='1d')

# Feature engineering
stock_data['MA50'] = stock_data['Close'].rolling(window=50).mean()
stock_data['MA200'] = stock_data['Close'].rolling(window=200).mean()

# Drop rows with NaN values
stock_data.dropna(inplace=True)

# Define features and target variable
features = ['Open', 'High', 'Low', 'Close', 'Volume', 'MA50', 'MA200']
X = stock_data[features]
y = stock_data['Close']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a Random Forest Regressor model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Create traces for actual and predicted prices
trace_actual = go.Scatter(x=y_test.index, y=y_test.values, mode='markers+lines', name='Actual Close Price', marker=dict(color='blue'))
trace_predicted = go.Scatter(x=y_test.index, y=y_pred, mode='markers+lines', name='Predicted Close Price', marker=dict(color='red'))

# Create layout for the plot
layout = go.Layout(title='Actual vs. Predicted Close Price',
                   xaxis=dict(title='Date'),
                   yaxis=dict(title='Close Price (USD)'),
                   hovermode='closest')

# Combine traces into a figure and plot
fig = go.Figure(data=[trace_actual, trace_predicted], layout=layout)
fig.show()
